{"version":3,"file":"dx-scheduler-core.es.js","sources":["../src/utils.js","../src/plugins/common/computeds.js","../src/plugins/scheduler-core/computeds.js","../src/plugins/month-view/helpers.js","../src/constants.js","../src/plugins/month-view/computeds.js","../src/plugins/week-view/helpers.js","../src/plugins/week-view/computeds.js","../src/plugins/view-state/reducers.js","../src/plugins/date-navigator/helpers.js"],"sourcesContent":["import moment from 'moment';\n\nexport const toPercentage = (value, total) => (value * 100) / total;\n\nconst createExcludedInterval = (day, start) => {\n  const leftBound = moment(start.day(day));\n  return [\n    leftBound,\n    moment(leftBound).hour(start.hour()).endOf('day'),\n  ];\n};\n\nconst excludedIntervals = (excludedDays, start) => excludedDays\n  .map(day => (day === 0 ? 7 : day))\n  .sort((a, b) => a - b)\n  .reduce((acc, day, i, allDays) => {\n    if (i && day === allDays[i - 1] + 1) {\n      acc[i - 1][1].day(day);\n    } else {\n      acc.push(createExcludedInterval(day, start));\n    }\n    return acc;\n  }, []);\n\nconst byDayPredicate = (boundary, date) => (\n  boundary.isSameOrAfter(date, 'day')\n  && !boundary.isSame(boundary.clone().startOf('day'))\n);\n\nexport const viewPredicate = (\n  appointment, left, right,\n  excludedDays = [],\n  filterAllDayAppointments = false,\n) => {\n  const { start, end } = appointment;\n  const isAppointmentInBoundary = end.isAfter(left) && start.isBefore(right);\n  const inInterval = (date, interval) => date.isBetween(...interval, null, '[]');\n  const isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment(left))\n    .find(interval => (inInterval(start, interval) && inInterval(end, interval)));\n\n  const considerAllDayAppointment = filterAllDayAppointments\n    ? moment(end).diff(start, 'hours') < 24\n    : true;\n\n  return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;\n};\n\nexport const sortAppointments = (appointments, byDay = false) => appointments\n  .slice().sort((a, b) => {\n    const compareValue = byDay ? 'day' : undefined;\n    if (a.start.isBefore(b.start, compareValue)) return -1;\n    if (a.start.isAfter(b.start, compareValue)) return 1;\n    if (a.start.isSame(b.start, compareValue)) {\n      if (a.end.isBefore(b.end)) return 1;\n      if (a.end.isAfter(b.end)) return -1;\n    }\n    return 0;\n  });\n\nexport const findOverlappedAppointments = (sortedAppointments, byDay = false) => {\n  const appointments = sortedAppointments.slice();\n  const groups = [];\n  let totalIndex = 0;\n\n  while (totalIndex < appointments.length) {\n    groups.push([]);\n    const current = appointments[totalIndex];\n    const currentGroup = groups[groups.length - 1];\n    let next = appointments[totalIndex + 1];\n    let maxBoundary = current.end;\n\n    currentGroup.push(current);\n    totalIndex += 1;\n    while (next && (maxBoundary.isAfter(next.start)\n      || (byDay && byDayPredicate(maxBoundary, next.start)))) {\n      currentGroup.push(next);\n      if (maxBoundary.isBefore(next.end)) maxBoundary = next.end;\n      totalIndex += 1;\n      next = appointments[totalIndex];\n    }\n  }\n  return groups;\n};\n\nexport const adjustAppointments = (groups, byDay = false) => groups.map((items) => {\n  let offset = 0;\n  let reduceValue = 1;\n  const appointments = items.slice();\n  const groupLength = appointments.length;\n  for (let startIndex = 0; startIndex < groupLength; startIndex += 1) {\n    const appointment = appointments[startIndex];\n    if (appointment.offset === undefined) {\n      let maxBoundary = appointment.end;\n      appointment.offset = offset;\n      for (let index = startIndex + 1; index < groupLength; index += 1) {\n        if (appointments[index].offset === undefined) {\n          if ((!byDay && maxBoundary.isSameOrBefore(appointments[index].start))\n            || (byDay && (maxBoundary.isBefore(appointments[index].start, 'day')))) {\n            maxBoundary = appointments[index].end;\n            appointments[index].offset = offset;\n          }\n        }\n      }\n\n      offset += 1;\n      if (reduceValue < offset) reduceValue = offset;\n    }\n  }\n  return { items: appointments, reduceValue };\n});\n\nexport const calculateFirstDateOfWeek = (currentDate, firstDayOfWeek, excludedDays = []) => {\n  const currentLocale = moment.locale();\n  moment.updateLocale('tmp-locale', {\n    week: { dow: firstDayOfWeek },\n  });\n  const firstDateOfWeek = moment(currentDate).startOf('week');\n  if (excludedDays.indexOf(firstDayOfWeek) !== -1) {\n    excludedDays.slice().sort().forEach((day) => {\n      if (day === firstDateOfWeek.day()) {\n        firstDateOfWeek.add(1, 'days');\n      }\n    });\n  }\n  moment.locale(currentLocale);\n\n  return firstDateOfWeek.toDate();\n};\n\nexport const unwrapGroups = groups => groups.reduce((acc, { items, reduceValue }) => {\n  acc.push(...items.map(appointment => ({\n    start: appointment.start,\n    end: appointment.end,\n    dataItem: appointment.dataItem,\n    offset: appointment.offset,\n    reduceValue,\n  })));\n  return acc;\n}, []);\n","import moment from 'moment';\nimport { calculateFirstDateOfWeek } from '../../utils';\n\nexport const dayScale = (\n  currentDate = new Date(),\n  firsDayOfWeek = 0,\n  dayCount = 7,\n  excluded = [],\n) => {\n  const result = [];\n  const date = moment(calculateFirstDateOfWeek(currentDate, firsDayOfWeek, excluded));\n  for (let index = 0; index < dayCount; index += 1) {\n    if (excluded.findIndex(item => item === date.day()) === -1) {\n      result.push(date.toDate());\n    }\n    date.add(1, 'days');\n  }\n  return result;\n};\n","export const appointments = (\n  data,\n  getAppointmentStartDate,\n  getAppointmentEndDate,\n) => data.map(appointment => ({\n  start: getAppointmentStartDate(appointment),\n  end: getAppointmentEndDate(appointment),\n  dataItem: appointment,\n}));\n","import moment from 'moment';\n\nconst TOP_CELL_OFFSET = 0.3;\nconst CELL_BOUND_OFFSET_PX = 2;\n\nexport const sliceAppointmentByWeek = (timeBounds, appointment, step) => {\n  const { left, right } = timeBounds;\n  const pieces = [];\n  const { start, end, ...restFields } = appointment;\n  let apptStart = start;\n  let apptEnd = end;\n  if (apptStart.isBefore(left)) apptStart = left.clone();\n  if (apptEnd.isAfter(right)) apptEnd = right.clone();\n  let pieceFrom = apptStart.clone();\n  let pieceTo = apptStart.clone();\n  let i = 0;\n  while (pieceTo.isBefore(apptEnd)) {\n    const currentRigthBound = left.clone().add(step * i, 'days').subtract(1, 'second');\n    if (currentRigthBound.isAfter(apptStart)) {\n      pieceTo = apptStart.clone().add(step * i, 'days');\n      if (pieceTo.isAfter(currentRigthBound)) {\n        pieceTo = currentRigthBound.clone();\n      }\n      if (pieceTo.isAfter(apptEnd)) {\n        pieceTo = apptEnd.clone();\n      }\n      if (!pieceFrom.isSame(pieceTo)) {\n        pieces.push({ start: pieceFrom, end: pieceTo, ...restFields });\n        pieceFrom = pieceTo.clone().add(1, 'second');\n      }\n    }\n    i += 1;\n  }\n  return pieces;\n};\n\nconst getCellRect = (date, monthCells, cellElements, takePrev) => {\n  const startViewDate = moment(monthCells[0][0].value);\n  const currentDate = moment(date);\n  let cellIndex = currentDate.diff(startViewDate, 'days');\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    cellIndex -= 1;\n  }\n\n  const cellElement = cellElements[cellIndex];\n  const {\n    top,\n    left,\n    width,\n    height,\n  } = cellElement.getBoundingClientRect();\n  let parentRect = { left: 0, top: 0, width: 0 };\n  if (cellElement.offsetParent) {\n    parentRect = cellElement.offsetParent.getBoundingClientRect();\n  }\n  return {\n    top,\n    left,\n    width,\n    height,\n    parentRect,\n  };\n};\n\nexport const getRectByDates = (\n  startDate,\n  endDate,\n  monthCells,\n  cellElements,\n) => {\n  const firstCellRect = getCellRect(startDate, monthCells, cellElements, false);\n  const lastCellRect = getCellRect(endDate, monthCells, cellElements, true);\n\n  const top = firstCellRect.top + (firstCellRect.height * TOP_CELL_OFFSET);\n  const height = firstCellRect.height - (firstCellRect.height * TOP_CELL_OFFSET);\n\n  return {\n    top: top - firstCellRect.parentRect.top,\n    left: (firstCellRect.left - firstCellRect.parentRect.left) + CELL_BOUND_OFFSET_PX,\n    width: ((lastCellRect.left - firstCellRect.left) + firstCellRect.width) - CELL_BOUND_OFFSET_PX,\n    height,\n    parentWidth: firstCellRect.parentRect.width,\n  };\n};\n","export const HORIZONTAL_APPOINTMENT_TYPE = 'horizontal';\nexport const VERTICAL_APPOINTMENT_TYPE = 'vertical';\n","import moment from 'moment';\nimport {\n  sortAppointments,\n  viewPredicate,\n  toPercentage,\n  findOverlappedAppointments,\n  adjustAppointments,\n  unwrapGroups,\n} from '../../utils';\nimport {\n  sliceAppointmentByWeek,\n  getRectByDates,\n} from './helpers';\nimport { HORIZONTAL_APPOINTMENT_TYPE } from '../../constants';\n\nconst DAY_COUNT = 7;\nconst WEEK_COUNT = 6;\nconst MONTH_LENGTH = 31;\n\nexport const endViewBoundary = (cells) => {\n  const lastCellIndex = cells.length - 1;\n  const lastDate = moment(cells[lastCellIndex][WEEK_COUNT].value);\n  return lastDate.startOf('day').add(1, 'days').subtract(1, 'second').toDate();\n};\n\nexport const monthCells = (currentDate, firstDayOfWeek, intervalCount = 1) => {\n  const currentMonth = moment(currentDate).month();\n  const targetDate = moment(currentDate);\n  const currentMonths = [targetDate.month()];\n  while (currentMonths.length < intervalCount) {\n    currentMonths.push(targetDate.add(1, 'months').month());\n  }\n  const currentDay = moment(currentDate).date();\n  const firstMonthDate = moment(currentDate).date(1);\n  const firstMonthDay = firstMonthDate.day() - firstDayOfWeek;\n  const prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;\n  const prevMonth = moment(currentDate).subtract(1, 'months');\n  const prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);\n  const from = moment()\n    .year(prevMonth.year())\n    .month(prevMonth.month())\n    .date(prevMonthStartDay)\n    .startOf('day');\n\n  const result = [];\n  while (result.length < (Math.trunc((MONTH_LENGTH * intervalCount) / DAY_COUNT) + 2)) {\n    const week = [];\n    while (week.length < DAY_COUNT) {\n      week.push({\n        value: from.toDate(),\n        isOtherMonth: currentMonths.findIndex(month => month === from.month()) === -1,\n        isCurrent: currentDay === from.date() && from.month() === currentMonth,\n      });\n      from.add(1, 'day');\n    }\n    result.push(week);\n  }\n  return result;\n};\n\nconst calculateDateIntervals = (\n  appointments,\n  leftBound, rightBound,\n) => appointments\n  .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n  .filter(appointment => viewPredicate(appointment, leftBound, rightBound))\n  .reduce((acc, appointment) => (\n    [\n      ...acc,\n      ...sliceAppointmentByWeek(\n        { left: moment(leftBound), right: moment(rightBound) },\n        appointment,\n        DAY_COUNT,\n      ),\n    ]), []);\n\nconst calculateRectsByDateIntervals = (\n  intervals,\n  cells,\n  cellElements,\n) => {\n  const sorted = sortAppointments(intervals, true);\n  const grouped = findOverlappedAppointments(sorted, true);\n\n  return unwrapGroups(adjustAppointments(grouped, true))\n    .map((appts) => {\n      const {\n        top, left,\n        width, height,\n        parentWidth,\n      } = getRectByDates(\n        appts.start,\n        appts.end,\n        cells,\n        cellElements,\n      );\n\n      return {\n        top: top + ((height / appts.reduceValue) * appts.offset),\n        height: height / appts.reduceValue,\n        left: toPercentage(left, parentWidth),\n        width: toPercentage(width, parentWidth),\n        dataItem: appts.dataItem,\n        type: HORIZONTAL_APPOINTMENT_TYPE,\n      };\n    });\n};\n\nexport const monthAppointmentRect = (\n  appointments,\n  startViewDate,\n  endViewDate,\n  cells,\n  cellElements,\n) => {\n  const dateIntervals = calculateDateIntervals(\n    appointments,\n    startViewDate,\n    endViewDate,\n  );\n  return calculateRectsByDateIntervals(\n    dateIntervals,\n    cells,\n    cellElements,\n  );\n};\n","import moment from 'moment';\n\nconst CELL_GAP = 0.15;\n\nexport const getCellByDate = (days, times, date, takePrev = false) => {\n  const rowIndex = times.findIndex((timeCell) => {\n    const startTime = moment(timeCell.start);\n    const endTime = moment(timeCell.end);\n    const cellStart = moment(date).hour(startTime.hours()).minutes(startTime.minutes());\n    const cellEnd = moment(date).hour(endTime.hours()).minutes(endTime.minutes());\n    return moment(date).isBetween(cellStart, cellEnd, null, takePrev ? '(]' : '[)');\n  });\n\n  const cellIndex = days.findIndex(day => moment(date).isSame(day, 'date'));\n  const cellStartTime = moment(times[rowIndex].start);\n  const cellStartDate = moment(days[cellIndex])\n    .hour(cellStartTime.hours())\n    .minutes(cellStartTime.minutes())\n    .toDate();\n  const totalCellIndex = (rowIndex * days.length) + cellIndex;\n  return {\n    index: totalCellIndex,\n    startDate: cellStartDate,\n  };\n};\n\nconst getCellRect = (date, days, times, cellDuration, cellElements, takePrev) => {\n  const {\n    index: cellIndex,\n    startDate: cellStartDate,\n  } = getCellByDate(days, times, date, takePrev);\n\n  const cellElement = cellElements[cellIndex];\n  const {\n    top,\n    left,\n    width,\n    height: cellHeight,\n  } = cellElement.getBoundingClientRect();\n  const timeOffset = moment(date).diff(cellStartDate, 'minutes');\n  const topOffset = cellHeight * (timeOffset / cellDuration);\n  let parentRect = { left: 0, top: 0, width: 0 };\n  if (cellElement.offsetParent) {\n    parentRect = cellElement.offsetParent.getBoundingClientRect();\n  }\n  return {\n    top,\n    left,\n    width,\n    topOffset,\n    parentRect,\n  };\n};\n\nexport const getRectByDates = (\n  startDate,\n  endDate,\n  days,\n  times,\n  cellDuration,\n  cellElements,\n) => {\n  const firstCellRect = getCellRect(startDate, days, times, cellDuration, cellElements, false);\n  const lastCellRect = getCellRect(endDate, days, times, cellDuration, cellElements, true);\n\n  const top = firstCellRect.top + firstCellRect.topOffset;\n  const height = (lastCellRect.top + lastCellRect.topOffset) - top;\n\n  return {\n    width: firstCellRect.width - (firstCellRect.width * CELL_GAP),\n    top: top - firstCellRect.parentRect.top,\n    left: firstCellRect.left - firstCellRect.parentRect.left,\n    parentWidth: firstCellRect.parentRect.width,\n    height,\n  };\n};\n\nexport const sliceAppointmentByDay = (appointment) => {\n  const { start, end, dataItem } = appointment;\n  if (start.isSame(end, 'day')) {\n    return [appointment];\n  }\n  return [\n    { start, end: moment(start).endOf('day'), dataItem },\n    { start: moment(end).startOf('day'), end, dataItem },\n  ];\n};\n\nexport const dayBoundaryPredicate = (\n  appointment,\n  leftBound, rightBound,\n  excludedDays = [],\n) => {\n  const dayStart = moment(leftBound);\n  const dayEnd = moment(rightBound);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes());\n\n  if (excludedDays.findIndex(day => day === moment(appointment.start).day()) !== -1) return false;\n\n  return (appointment.end.isAfter(startDayTime)\n    && appointment.start.isBefore(endDayTime));\n};\n\nexport const reduceAppointmentByDayBounds = (appointment, leftBound, rightBound) => {\n  const dayStart = moment(leftBound);\n  const dayEnd = moment(rightBound);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes())\n    .seconds(dayStart.seconds());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes())\n    .seconds(dayEnd.seconds());\n\n  return {\n    ...appointment,\n    ...(appointment.start.isSameOrBefore(startDayTime) ? { start: startDayTime } : null),\n    ...(appointment.end.isSameOrAfter(endDayTime) ? { end: endDayTime } : null),\n  };\n};\n","import moment from 'moment';\nimport {\n  getRectByDates,\n  sliceAppointmentByDay,\n  dayBoundaryPredicate,\n  reduceAppointmentByDayBounds,\n} from './helpers';\nimport {\n  sortAppointments,\n  viewPredicate,\n  calculateFirstDateOfWeek,\n  toPercentage,\n  findOverlappedAppointments,\n  adjustAppointments,\n  unwrapGroups,\n} from '../../utils';\nimport { VERTICAL_APPOINTMENT_TYPE } from '../../constants';\n\nconst subtractSecond = date => moment(date).subtract(1, 'second').toDate();\n\nconst calculateViewBound = (dateBound, timeBound) => {\n  const time = moment(timeBound);\n  return moment(dateBound)\n    .hour(time.hours())\n    .minute(time.minutes())\n    .toDate();\n};\n\nconst calculateDateIntervals = (\n  appointments,\n  leftBound, rightBound,\n  excludedDays,\n) => appointments\n  .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n  .filter(appointment => viewPredicate(appointment, leftBound, rightBound, excludedDays, true))\n  .reduce((acc, appointment) => ([...acc, ...sliceAppointmentByDay(appointment)]), [])\n  .filter(appointment => dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays))\n  .map(appointment => reduceAppointmentByDayBounds(appointment, leftBound, rightBound));\n\nconst calculateRectsByDateIntervals = (\n  intervals,\n  dayScale, timeScale,\n  cellDuration, cellElements,\n) => {\n  const sorted = sortAppointments(intervals);\n  const grouped = findOverlappedAppointments(sorted);\n\n  return unwrapGroups(adjustAppointments(grouped))\n    .map((appointment) => {\n      const {\n        top, left,\n        width, height,\n        parentWidth,\n      } = getRectByDates(\n        appointment.start, appointment.end,\n        dayScale, timeScale,\n        cellDuration, cellElements,\n      );\n      const widthInPx = width / appointment.reduceValue;\n      return {\n        top,\n        height,\n        left: toPercentage(left + (widthInPx * appointment.offset), parentWidth),\n        width: toPercentage(widthInPx, parentWidth),\n        dataItem: appointment.dataItem,\n        type: VERTICAL_APPOINTMENT_TYPE,\n      };\n    });\n};\n\nexport const appointmentRects = (\n  appointments,\n  leftBound, rightBound,\n  excludedDays,\n  dayScale, timeScale,\n  cellDuration, cellElements,\n) => {\n  const dateIntervals = calculateDateIntervals(\n    appointments,\n    leftBound, rightBound,\n    excludedDays,\n  );\n  return calculateRectsByDateIntervals(\n    dateIntervals,\n    dayScale, timeScale,\n    cellDuration, cellElements,\n  );\n};\n\nexport const timeScale = (\n  currentDate,\n  firstDayOfWeek,\n  startDayHour,\n  endDayHour,\n  cellDuration,\n  excludedDays,\n) => {\n  const result = [];\n  const startViewDate = calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays);\n  const left = moment(startViewDate).startOf('hour').hour(startDayHour);\n  const right = moment(startViewDate).startOf('hour').hour(endDayHour);\n  while (left.isBefore(right)) {\n    const startDate = left.toDate();\n    left.add(cellDuration, 'minutes');\n    result.push({ start: startDate, end: left.toDate() });\n  }\n  result[result.length - 1].end = subtractSecond(result[result.length - 1].end);\n  return result;\n};\n\nexport const startViewDate = (days, times) => calculateViewBound(days[0], times[0].start);\n\nexport const endViewDate = (days, times) => {\n  const bound = calculateViewBound(days[days.length - 1], times[times.length - 1].end);\n  return subtractSecond(bound);\n};\n","import moment from 'moment';\n\nexport const changeCurrentDate = (currentDate, {\n  nextDate,\n  step,\n  amount,\n  back = false,\n}) => (\n  nextDate || moment(currentDate)[back ? 'subtract' : 'add'](amount, step).toDate()\n);\n","import moment from 'moment';\n\nconst calculateTitleByDays = (startViewDate, endViewDate) => {\n  const momentStartViewDate = moment(startViewDate);\n  const momentEndViewDate = moment(endViewDate);\n\n  if (momentStartViewDate.isSame(momentEndViewDate, 'day')) {\n    return momentStartViewDate.format('D MMMM YYYY');\n  }\n  if (momentStartViewDate.isSame(momentEndViewDate, 'year')) {\n    if (momentStartViewDate.isSame(momentEndViewDate, 'month')) {\n      return `${momentStartViewDate.format('D')}-${momentEndViewDate.format('D MMMM YYYY')}`;\n    }\n    return `${momentStartViewDate.format('D MMM')} - ${momentEndViewDate.format('D MMM YYYY')}`;\n  }\n  return `${momentStartViewDate.format('D MMM YY')} - ${momentEndViewDate.format('D MMM YY')}`;\n};\n\nconst calculateTitleByMonths = (currentDate, intervalCount) => {\n  const momentCurrentDate = moment(currentDate);\n\n  if (intervalCount === 1) {\n    return momentCurrentDate.format('MMMM YYYY');\n  }\n  const lastMonth = momentCurrentDate.clone().add(intervalCount - 1, 'month');\n  if (momentCurrentDate.isSame(lastMonth, 'year')) {\n    return `${momentCurrentDate.format('MMM')}-${lastMonth.format('MMM YYYY')}`;\n  }\n  return `${momentCurrentDate.format('MMM YY')} - ${lastMonth.format('MMM YY')}`;\n};\n\nexport const viewBoundTitle = (startViewDate, endViewDate, step, currentDate, intervalCount) => (\n  step !== 'month'\n    ? calculateTitleByDays(startViewDate, endViewDate)\n    : calculateTitleByMonths(currentDate, intervalCount)\n);\n"],"names":["toPercentage","value","total","createExcludedInterval","day","start","leftBound","moment","hour","endOf","excludedIntervals","excludedDays","map","sort","a","b","reduce","acc","i","allDays","push","byDayPredicate","boundary","date","isSameOrAfter","isSame","clone","startOf","viewPredicate","appointment","left","right","filterAllDayAppointments","end","isAppointmentInBoundary","isAfter","isBefore","inInterval","interval","isBetween","isAppointmentInExcludedDays","find","considerAllDayAppointment","diff","sortAppointments","appointments","byDay","slice","compareValue","undefined","findOverlappedAppointments","sortedAppointments","groups","totalIndex","length","current","currentGroup","next","maxBoundary","adjustAppointments","items","offset","reduceValue","groupLength","startIndex","index","isSameOrBefore","calculateFirstDateOfWeek","currentDate","firstDayOfWeek","currentLocale","locale","updateLocale","dow","firstDateOfWeek","indexOf","forEach","add","toDate","unwrapGroups","dataItem","dayScale","Date","firsDayOfWeek","dayCount","excluded","result","findIndex","item","data","getAppointmentStartDate","getAppointmentEndDate","TOP_CELL_OFFSET","CELL_BOUND_OFFSET_PX","sliceAppointmentByWeek","timeBounds","step","pieces","restFields","apptStart","apptEnd","pieceFrom","pieceTo","currentRigthBound","subtract","getCellRect","monthCells","cellElements","takePrev","startViewDate","cellIndex","format","cellElement","getBoundingClientRect","top","width","height","parentRect","offsetParent","getRectByDates","startDate","endDate","firstCellRect","lastCellRect","HORIZONTAL_APPOINTMENT_TYPE","VERTICAL_APPOINTMENT_TYPE","DAY_COUNT","WEEK_COUNT","MONTH_LENGTH","endViewBoundary","cells","lastCellIndex","lastDate","intervalCount","currentMonth","month","targetDate","currentMonths","currentDay","firstMonthDate","firstMonthDay","prevMonthDayCount","prevMonth","prevMonthStartDay","daysInMonth","from","year","Math","trunc","week","calculateDateIntervals","rightBound","restArgs","filter","calculateRectsByDateIntervals","intervals","sorted","grouped","appts","parentWidth","monthAppointmentRect","endViewDate","dateIntervals","CELL_GAP","getCellByDate","days","times","rowIndex","timeCell","startTime","endTime","cellStart","hours","minutes","cellEnd","cellStartTime","cellStartDate","totalCellIndex","cellDuration","cellHeight","timeOffset","topOffset","sliceAppointmentByDay","dayBoundaryPredicate","dayStart","dayEnd","startDayTime","endDayTime","reduceAppointmentByDayBounds","seconds","subtractSecond","calculateViewBound","dateBound","timeBound","time","minute","timeScale","widthInPx","appointmentRects","startDayHour","endDayHour","bound","changeCurrentDate","nextDate","amount","back","calculateTitleByDays","momentStartViewDate","momentEndViewDate","calculateTitleByMonths","momentCurrentDate","lastMonth","viewBoundTitle"],"mappings":"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"}