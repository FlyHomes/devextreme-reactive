{"version":3,"file":"dx-vue-grid.es.js","sources":["../src/plugins/grid-core.js","../src/grid.js","../../../node_modules/babel-helper-vue-jsx-merge-props/index.js","../src/plugins/table.js","../src/plugins/table-header-row.js","../src/plugins/integrated-sorting.js","../src/plugins/sorting-state.js","../src/plugins/toolbar.js","../src/components/table-layout.js","../src/components/table-layout/column-group.js","../src/components/table-layout/row-layout.js","../src/components/table-layout/rows-block-layout.js","../src/components/table-layout/static-table-layout.js","../src/components/table-layout/virtual-table-layout.js","../src/plugins/filtering-state.js","../src/plugins/integrated-filtering.js","../src/plugins/table-filter-row.js","../src/plugins/grouping-state.js","../src/plugins/integrated-grouping.js","../src/plugins/custom-grouping.js","../src/plugins/grouping-panel.js","../src/plugins/table-group-row.js","../src/components/group-panel-layout/item-layout.js","../src/components/group-panel-layout.js","../src/plugins/search-state.js","../src/plugins/search-panel.js","../src/plugins/selection-state.js","../src/plugins/integrated-selection.js","../src/plugins/table-selection.js","../src/plugins/paging-state.js","../src/plugins/integrated-paging.js","../src/plugins/custom-paging.js","../src/plugins/paging-panel.js","../src/plugins/data-type-provider.js","../src/plugins/row-detail-state.js","../src/plugins/table-row-detail.js","../src/plugins/editing-state.js","../src/plugins/table-edit-column.js","../src/plugins/table-edit-row.js","../src/plugins/tree-data-state.js","../src/plugins/custom-tree-data.js","../src/plugins/table-tree-column.js","../src/plugins/table-band-header.js","../src/plugins/table-column-visibility.js","../src/plugins/column-chooser.js"],"sourcesContent":["import {\n  DxPlugin, DxGetter, DxTemplate, DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\n\nexport const GridCore = {\n  name: 'GridCore',\n  props: {\n    rows: {\n      type: Array,\n      required: true,\n    },\n    getRowId: {\n      type: Function,\n    },\n    getCellValue: {\n      type: Function,\n    },\n    columns: {\n      type: Array,\n      required: true,\n    },\n    rootComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      rows,\n      columns,\n      getRowId,\n      getCellValue,\n      rootComponent: Root,\n    } = this;\n\n    return (\n      <DxPlugin>\n        <DxGetter name=\"rows\" value={rows} />\n        <DxGetter name=\"getRowId\" value={rowIdGetter(getRowId, rows)} />\n        <DxGetter name=\"columns\" value={columns} />\n        <DxGetter name=\"getCellValue\" value={cellValueGetter(getCellValue, columns)} />\n        <DxTemplate name=\"root\">\n          <Root>\n            <DxTemplatePlaceholder name=\"header\" />\n            <DxTemplatePlaceholder name=\"body\" />\n            <DxTemplatePlaceholder name=\"footer\" />\n          </Root>\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxPluginHost } from '@devexpress/dx-vue-core';\nimport { GridCore } from './plugins/grid-core';\n\nexport const DxGrid = {\n  name: 'DxGrid',\n  functional: true,\n  render(h, context) {\n    return (\n      <DxPluginHost>\n        <GridCore\n          {...context.data}\n        />\n        {context.children}\n      </DxPluginHost>\n    );\n  },\n};\n","var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/\n\nmodule.exports = function mergeJSXProps (objs) {\n  return objs.reduce(function (a, b) {\n    var aa, bb, key, nestedKey, temp\n    for (key in b) {\n      aa = a[key]\n      bb = b[key]\n      if (aa && nestRE.test(key)) {\n        // normalize class\n        if (key === 'class') {\n          if (typeof aa === 'string') {\n            temp = aa\n            a[key] = aa = {}\n            aa[temp] = true\n          }\n          if (typeof bb === 'string') {\n            temp = bb\n            b[key] = bb = {}\n            bb[temp] = true\n          }\n        }\n        if (key === 'on' || key === 'nativeOn' || key === 'hook') {\n          // merge functions\n          for (nestedKey in bb) {\n            aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey])\n          }\n        } else if (Array.isArray(aa)) {\n          a[key] = aa.concat(bb)\n        } else if (Array.isArray(bb)) {\n          a[key] = [aa].concat(bb)\n        } else {\n          for (nestedKey in bb) {\n            aa[nestedKey] = bb[nestedKey]\n          }\n        }\n      } else {\n        a[key] = b[key]\n      }\n    }\n    return a\n  }, {})\n}\n\nfunction mergeFn (a, b) {\n  return function () {\n    a && a.apply(this, arguments)\n    b && b.apply(this, arguments)\n  }\n}\n","import {\n  DxGetter,\n  DxTemplate,\n  DxTemplatePlaceholder,\n  DxTemplateConnector,\n  DxPlugin,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableColumnsWithDataRows,\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isDataTableCell,\n  isDataTableRow,\n  isHeaderStubTableCell,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst RowPlaceholder = {\n  props: {\n    tableRow: {\n      type: Object,\n      required: true,\n    },\n    height: {\n      type: [Number, String],\n    },\n  },\n  render() {\n    return (\n      <DxTemplatePlaceholder\n        name=\"tableRow\"\n        {...{ attrs: { ...this.$props } }}\n      >\n        {this.$slots.default}\n      </DxTemplatePlaceholder>\n    );\n  },\n};\n\nconst CellPlaceholder = {\n  props: {\n    tableColumn: {\n      type: Object,\n      required: true,\n    },\n    tableRow: {\n      type: Object,\n      required: true,\n    },\n    colSpan: {\n      type: Number,\n      required: true,\n    },\n    rowSpan: {\n      type: Number,\n    },\n  },\n  render() {\n    return (\n      <DxTemplatePlaceholder\n        name=\"tableCell\"\n        {...{ attrs: { ...this.$props } }}\n      />\n    );\n  },\n};\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = (\n  { rows, getRowId },\n) => tableRowsWithDataRows(rows, getRowId);\n\nconst pluginDependencies = [\n  { name: 'DxDataTypeProvider', optional: true },\n];\n\nexport const DxTable = {\n  name: 'DxTable',\n  props: {\n    layoutComponent: {\n      type: Object,\n      required: true,\n    },\n    tableComponent: {\n      type: Object,\n      required: true,\n    },\n    headComponent: {\n      type: Object,\n      required: true,\n    },\n    bodyComponent: {\n      type: Object,\n      required: true,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    stubRowComponent: {\n      type: Object,\n      required: true,\n    },\n    stubCellComponent: {\n      type: Object,\n      required: true,\n    },\n    stubHeaderCellComponent: {\n      type: Object,\n      required: true,\n    },\n    noDataRowComponent: {\n      type: Object,\n      required: true,\n    },\n    noDataCellComponent: {\n      type: Object,\n      required: true,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n    messages: {\n      type: Object,\n    },\n  },\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      messages,\n    } = this;\n\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = (\n      { columns },\n    ) => tableColumnsWithDataRows(columns, columnExtensions);\n\n    return (\n      <DxPlugin\n        name=\"DxTable\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <DxGetter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <DxGetter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <DxGetter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <DxTemplate name=\"body\">\n          <DxTemplatePlaceholder name=\"table\" />\n        </DxTemplate>\n        <DxTemplate name=\"table\">\n          <DxTemplateConnector>\n            {({\n              getters: {\n                tableHeaderRows: headerRows,\n                tableBodyRows: bodyRows,\n                tableColumns: columns,\n                getTableCellColSpan,\n              },\n            }) => (\n              <Layout\n                tableComponent={tableComponent}\n                headComponent={headComponent}\n                bodyComponent={bodyComponent}\n                containerComponent={containerComponent}\n                headerRows={headerRows}\n                bodyRows={bodyRows}\n                columns={columns}\n                rowComponent={RowPlaceholder}\n                cellComponent={CellPlaceholder}\n                getCellColSpan={getTableCellColSpan}\n              />\n            )}\n          </DxTemplateConnector>\n        </DxTemplate>\n        <DxTemplate name=\"tableCell\">\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {(\n                { getters: { tableHeaderRows: headerRows } },\n              ) => (isHeaderStubTableCell(attrs.tableRow, headerRows)\n                ? <StubHeaderCell {...{ attrs: { ...attrs }, on: { ...listeners } }} />\n                : <StubCell {...{ attrs: { ...attrs }, on: { ...listeners } }} />\n              )\n              }\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({ getters: { getCellValue } }) => {\n                const value = getCellValue(attrs.tableRow.row, attrs.tableColumn.column.name);\n                return (\n                  <DxTemplatePlaceholder\n                    name=\"valueFormatter\"\n                    row={attrs.tableRow.row}\n                    column={attrs.tableColumn.column}\n                    value={value}\n                  >\n                    {content => (\n                      <Cell\n                        {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                        row={attrs.tableRow.row}\n                        column={attrs.tableColumn.column}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </DxTemplatePlaceholder>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={({ attrs: { tableRow } }) => isNoDataTableRow(tableRow)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({ getters: { tableColumns } }) => {\n                if (isNoDataTableCell(attrs.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate name=\"tableRow\">\n          {({ attrs, listeners, slots }) => (\n            <StubRow {...{ attrs: { ...attrs }, on: { ...listeners } }}>\n              {slots.default}\n            </StubRow>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isDataTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => (\n            <Row\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n              row={attrs.tableRow.row}\n            >\n              {slots.default}\n            </Row>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isNoDataTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => (\n            <NoDataRow {...{ attrs: { ...attrs }, on: { ...listeners } }}>\n              {slots.default}\n            </NoDataRow>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter,\n  DxTemplate,\n  DxTemplateConnector,\n  DxPlugin,\n  DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getColumnSortingDirection,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\n\nconst tableHeaderRowsComputed = ({ tableHeaderRows }) => tableRowsWithHeading(tableHeaderRows);\n\nconst pluginDependencies = [\n  { name: 'DxTable' },\n];\n\nexport const DxTableHeaderRow = {\n  name: 'DxTableHeaderRow',\n  props: {\n    showSortingControls: {\n      type: Boolean,\n    },\n    showGroupingControls: {\n      type: Boolean,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n    } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxTableHeaderRow\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: {\n                  sorting,\n                  tableColumns,\n                  isColumnSortingEnabled,\n                  isColumnGroupingEnabled,\n                },\n                actions: {\n                  changeColumnSorting,\n                  changeColumnGrouping,\n                },\n              }) => {\n                const { name: columnName } = attrs.tableColumn.column;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName) && atLeastOneDataColumn;\n\n                return (\n                  <HeaderCell\n                    {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                    column={attrs.tableColumn.column}\n                    showSortingControls={this.showSortingControls}\n                    showGroupingControls={this.showGroupingControls}\n                    sortingEnabled={sortingEnabled}\n                    groupingEnabled={groupingEnabled}\n                    sortingDirection={this.showSortingControls\n                      ? getColumnSortingDirection(sorting, columnName)\n                      : undefined}\n                    onSort={(\n                      { direction, keepOther },\n                    ) => changeColumnSorting({ columnName, direction, keepOther })}\n                    onGroup={() => changeColumnGrouping({ columnName })}\n                  >\n                    <DxTemplatePlaceholder\n                      slot=\"before\"\n                      name=\"tableHeaderCellBefore\"\n                      column={attrs.tableColumn.column}\n                    />\n                  </HeaderCell>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isHeadingTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => (\n            <HeaderRow\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n            >\n              {slots.default}\n            </HeaderRow>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxSortingState' },\n];\n\nexport const DxIntegratedSorting = {\n  name: 'DxIntegratedSorting',\n  props: {\n    columnExtensions: {\n      type: Array,\n    },\n  },\n  render() {\n    const { columnExtensions } = this;\n    const getColumnCompare = columnName => getColumnExtension(columnExtensions, columnName).compare;\n\n    const rowsComputed = ({\n      rows, sorting, getCellValue, isGroupRow, getRowLevelKey,\n    }) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <DxPlugin\n        name=\"DxIntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"rows\" computed={rowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n} from '@devexpress/dx-grid-core';\n\nexport const DxSortingState = {\n  name: 'DxSortingState',\n  props: {\n    sorting: {\n      type: Array,\n      required: true,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n    columnSortingEnabled: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  methods: {\n    changeColumnSorting(payload) {\n      const persistentSortedColumns = getPersistentSortedColumns(\n        this.sorting, this.columnExtensions,\n      );\n      const keepOther = calculateKeepOther(\n        this.sorting, payload.keepOther, persistentSortedColumns,\n      );\n      this.$emit(\n        'update:sorting',\n        changeColumnSorting({ sorting: this.sorting }, { ...payload, keepOther }).sorting,\n      );\n    },\n  },\n\n  render() {\n    const { columnExtensions, columnSortingEnabled } = this;\n    const columnExtensionValueGetter = (extensions, defaultValue) => getColumnExtensionValueGetter(extensions, 'sortingEnabled', defaultValue);\n\n    return (\n      <DxPlugin\n        name=\"DxSortingState\"\n      >\n        <DxGetter name=\"sorting\" value={this.sorting} />\n        <DxGetter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <DxAction name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate,\n  DxPlugin,\n  DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\n\nexport const DxToolbar = {\n  name: 'DxToolbar',\n  props: {\n    rootComponent: {\n      type: Object,\n      required: true,\n    },\n    flexibleSpaceComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this;\n    return (\n      <DxPlugin\n        name=\"DxToolbar\"\n      >\n        <DxTemplate name=\"header\">\n          <Root>\n            <DxTemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <DxTemplatePlaceholder />\n        </DxTemplate>\n        <DxTemplate name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","const TABLE_FLEX_TYPE = 'flex';\n\nexport const TableLayout = {\n  props: {\n    columns: {\n      type: Array,\n      required: true,\n    },\n    layoutComponent: {\n      type: Object,\n      required: true,\n    },\n    minColumnWidth: {\n      type: Number,\n      required: true,\n    },\n  },\n  methods: {\n    getColumns() {\n      const { columns } = this;\n\n      let result = columns;\n\n      const isFixedWidth = columns.filter(column => column.width === undefined).length === 0;\n      if (isFixedWidth) {\n        result = result.slice();\n        result.push({ key: TABLE_FLEX_TYPE, type: TABLE_FLEX_TYPE });\n      }\n\n      return result;\n    },\n  },\n  render() {\n    const {\n      minColumnWidth,\n      layoutComponent: Layout,\n    } = this;\n\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .reduce((acc, width) => acc + width, 0);\n\n    return (\n      <Layout\n        {...{ attrs: this.$attrs }}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  },\n};\n","export const ColumnGroup = {\n  name: 'ColumnGroup',\n  props: {\n    columns: {\n      type: Array,\n      required: true,\n    },\n  },\n  render() {\n    const { columns } = this;\n\n    return (\n      <colgroup>\n        {columns.map(column => (\n          <col\n            key={column.key}\n            style={column.width !== undefined\n              ? { width: `${column.width}px` }\n              : null}\n          />\n        ))}\n      </colgroup>\n    );\n  },\n};\n","const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport const RowLayout = {\n  name: 'RowLayout',\n  props: {\n    row: {\n      required: true,\n    },\n    columns: {\n      type: Array,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    getCellColSpan: {\n      getCellColSpan: Function,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      row,\n      columns,\n      rowComponent: Row,\n      cellComponent: Cell,\n      getCellColSpan,\n    } = this;\n    const getColSpan = (\n      tableRow, tableColumn,\n    ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {\n          columns\n            .map(column => (\n              <Cell\n                key={column.key}\n                tableRow={row}\n                tableColumn={column}\n                colSpan={getColSpan(row, column)}\n              />\n            ))\n        }\n      </Row>\n    );\n  },\n};\n","import { RowLayout } from './row-layout';\n\nexport const RowsBlockLayout = {\n  name: 'RowsBlockLayout',\n  props: {\n    rows: {\n      type: Array,\n      required: true,\n    },\n    columns: {\n      type: Array,\n      required: true,\n    },\n    blockComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    getCellColSpan: {\n      getCellColSpan: Function,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  },\n};\n","import { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\n\nexport const StaticTableLayout = {\n  props: {\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    bodyComponent: {\n      type: Object,\n      required: true,\n    },\n    headComponent: {\n      type: Object,\n    },\n    tableComponent: {\n      type: Object,\n      required: true,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    columns: {\n      type: Array,\n      required: true,\n    },\n    bodyRows: {\n      type: Array,\n      required: true,\n    },\n    headerRows: {\n      type: Array,\n      default: () => [],\n    },\n    minWidth: {\n      type: Number,\n      required: true,\n    },\n    getCellColSpan: {\n      getCellColSpan: Function,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      cellComponent,\n      rowComponent,\n      bodyComponent,\n      headComponent,\n      tableComponent: Table,\n      containerComponent: Container,\n      columns,\n      bodyRows,\n      headerRows,\n      minWidth,\n      getCellColSpan,\n    } = this;\n\n    return (\n      <Container>\n        <Table\n          style={{ minWidth: `${minWidth}px` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              columns={columns}\n              blockComponent={headComponent}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n              getCellColSpan={getCellColSpan}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            columns={columns}\n            blockComponent={bodyComponent}\n            rowComponent={rowComponent}\n            cellComponent={cellComponent}\n            getCellColSpan={getCellColSpan}\n          />\n        </Table>\n      </Container>\n    );\n  },\n};\n","import { getCollapsedGrid } from '@devexpress/dx-grid-core';\nimport { DxSizer, DxRefHolder } from '@devexpress/dx-vue-core';\nimport { ColumnGroup } from './column-group';\n\nexport const VirtualTableLayout = {\n  name: 'VirtualTableLayout',\n  props: {\n    minWidth: {\n      type: Number,\n      required: true,\n    },\n    minColumnWidth: {\n      type: Number,\n      required: true,\n    },\n    height: {\n      type: Number,\n      required: true,\n    },\n    headerRows: {\n      type: Array,\n      default: () => [],\n    },\n    bodyRows: {\n      type: Array,\n      required: true,\n    },\n    columns: {\n      type: Array,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    bodyComponent: {\n      type: Object,\n      required: true,\n    },\n    headComponent: {\n      type: Object,\n      default: () => null,\n    },\n    tableComponent: {\n      type: Object,\n      required: true,\n    },\n    headTableComponent: {\n      type: Object,\n      default: () => null,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    estimatedRowHeight: {\n      type: Number,\n      required: true,\n    },\n    getCellColSpan: {\n      type: Function,\n      required: true,\n    },\n  },\n  data() {\n    return ({\n      rowHeights: new Map(),\n      viewportTop: 0,\n      viewportLeft: 0,\n    });\n  },\n  mounted() {\n    this.storeRowHeights();\n  },\n  updated() {\n    this.storeRowHeights();\n  },\n  watch: {\n    headerRows(headerRows) {\n      const { rowHeights: prevRowHeight, bodyRows } = this;\n      const rowHeights = [headerRows, bodyRows].reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n      this.rowHeights = rowHeights;\n    },\n    bodyRows(bodyRows) {\n      const { rowHeights: prevRowHeight, headerRows } = this;\n      const rowHeights = [headerRows, bodyRows].reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n      this.rowHeights = rowHeights;\n    },\n  },\n  methods: {\n    getRowHeight(row) {\n      const storedHeight = this.rowHeights.get(row.key);\n      if (storedHeight !== undefined) return storedHeight;\n      if (row.height) return row.height;\n      return this.estimatedRowHeight;\n    },\n    storeRowHeights() {\n      const rowsWithChangedHeights = Object.keys(this.$refs)\n        .map(node => this.$refs[node])\n        .filter(node => !!node)\n        .map(node => [node.$attrs.row, node.$el.getBoundingClientRect().height])\n        .filter(([row, height]) => height !== this.getRowHeight(row));\n\n      if (rowsWithChangedHeights.length) {\n        const newRowHeights = new Map();\n        rowsWithChangedHeights\n          .forEach(([row, height]) => newRowHeights.set(row.key, height));\n\n        this.rowHeights = newRowHeights;\n      }\n    },\n    updateViewport(e) {\n      const node = e.target;\n\n      if (node !== e.currentTarget) {\n        return;\n      }\n\n      // NOTE: prevent iOS to flicker in bounces\n      if (node.scrollTop < 0\n        || node.scrollLeft < 0\n        || node.scrollLeft + node.clientWidth > Math.max(node.scrollWidth, node.clientWidth)\n        || node.scrollTop + node.clientHeight > Math.max(node.scrollHeight, node.clientHeight)) {\n        return;\n      }\n\n      this.viewportTop = node.scrollTop;\n      this.viewportLeft = node.scrollLeft;\n    },\n    renderRowsBlock(collapsedGrid, Table, Body) {\n      const {\n        minWidth,\n        rowComponent: Row,\n        cellComponent: Cell,\n      } = this;\n\n      return (\n        <Table\n          style={{ minWidth: `${minWidth}px` }}\n          minWidth={`${minWidth}px`}\n        >\n          <ColumnGroup\n            columns={collapsedGrid.columns}\n          />\n          <Body>\n            {collapsedGrid.rows.map((visibleRow) => {\n              const { row, cells = [] } = visibleRow;\n              return (\n                <DxRefHolder\n                  key={row.key}\n                  ref={`${row.key}`}\n                  row={row}\n                >\n                  <Row\n                    tableRow={row}\n                    height={row.height !== undefined ? `${row.height}px` : undefined}\n                  >\n                    {cells.map((cell) => {\n                      const { column } = cell;\n                      return (\n                        <Cell\n                          key={column.key}\n                          tableRow={row}\n                          tableColumn={column}\n                          style={column.animationState}\n                          colSpan={cell.colSpan}\n                        />\n                      );\n                    })}\n                  </Row>\n                </DxRefHolder>\n              );\n            })}\n          </Body>\n        </Table>\n      );\n    },\n  },\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      columns,\n      minColumnWidth,\n      height,\n      containerComponent: Container,\n      headTableComponent: HeadTable,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      getCellColSpan,\n      updateViewport,\n      renderRowsBlock,\n    } = this;\n\n    return (\n      <DxSizer>\n        {({ width }) => {\n          const headHeight = headerRows.reduce((acc, row) => acc + this.getRowHeight(row), 0);\n          const getColSpan = (\n            tableRow, tableColumn,\n          ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n          const collapsedHeaderGrid = getCollapsedGrid({\n            rows: headerRows,\n            columns,\n            top: 0,\n            left: this.viewportLeft,\n            width,\n            height: headHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          const collapsedBodyGrid = getCollapsedGrid({\n            rows: bodyRows,\n            columns,\n            top: this.viewportTop,\n            left: this.viewportLeft,\n            width,\n            height: height - headHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          return (\n            <Container\n              style={{ height: `${height}px` }}\n              onScroll={updateViewport}\n            >\n              {!!headerRows.length && renderRowsBlock(collapsedHeaderGrid, HeadTable, Head)}\n              {renderRowsBlock(collapsedBodyGrid, Table, Body)}\n            </Container>\n          );\n        }}\n      </DxSizer>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue },\n) => filterExpression(filters, filterExpressionValue);\n\nexport const DxFilteringState = {\n  name: 'DxFilteringState',\n  props: {\n    filters: {\n      type: Array,\n      required: true,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n    columnFilteringEnabled: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  methods: {\n    changeColumnFilter(payload) {\n      this.$emit(\n        'update:filters',\n        changeColumnFilter(this.filters, payload),\n      );\n    },\n  },\n  render() {\n    const { filters, columnExtensions, columnFilteringEnabled } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxFilteringState\"\n      >\n        <DxGetter name=\"filters\" value={filters} />\n        <DxGetter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <DxGetter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <DxAction name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  filteredRows,\n  getColumnExtension,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  defaultFilterPredicate,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxFilteringState', optional: true },\n  { name: 'DxSearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }) => unwrappedFilteredRows(rows);\n\nexport const DxIntegratedFiltering = {\n  name: 'DxIntegratedFiltering',\n  props: {\n    columnExtensions: {\n      type: Array,\n    },\n  },\n  render() {\n    const { columnExtensions } = this;\n    const getColumnPredicate = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <DxPlugin\n        name=\"DxIntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"rows\" computed={rowsComputed} />\n        <DxGetter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <DxGetter name=\"rows\" computed={unwrappedRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n\nDxIntegratedFiltering.defaultPredicate = defaultFilterPredicate;\n","import {\n  DxGetter, DxTemplate, DxTemplateConnector, DxTemplatePlaceholder, DxPlugin,\n} from '@devexpress/dx-vue-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  getMessagesFormatter,\n  isFilterValueEmpty,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxFilteringState' },\n  { name: 'DxTable' },\n  { name: 'DxDataTypeProvider', optional: true },\n];\n\nexport const DxTableFilterRow = {\n  name: 'DxTableFilterRow',\n  props: {\n    rowHeight: {\n      type: Number,\n    },\n    showFilterSelector: {\n      type: Boolean,\n      default: false,\n    },\n    messages: {\n      type: Object,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    filterSelectorComponent: {\n      type: Object,\n      required: true,\n    },\n    iconComponent: {\n      type: Object,\n      required: true,\n    },\n    editorComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return ({\n      filterOperations: {},\n    });\n  },\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      editorComponent: EditorComponent,\n      messages,\n      filterOperations,\n    } = this;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows },\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n\n    return (\n      <DxPlugin\n        name=\"DxTableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: { filters, isColumnFilteringEnabled, getAvailableFilterOperations },\n                actions: { changeColumnFilter },\n              }) => {\n                const { name: columnName } = attrs.tableColumn.column;\n                const filter = getColumnFilterConfig(filters, columnName);\n                const onFilter = config => changeColumnFilter({ columnName, config });\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = filterOperations[columnName]\n                  || columnFilterOperations[0];\n                const handleFilterOperationChange = (value) => {\n                  this.filterOperations = {\n                    ...filterOperations,\n                    [columnName]: value,\n                  };\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value) => {\n                  onFilter(!isFilterValueEmpty(value)\n                    ? { value, operation: selectedFilterOperation }\n                    : null);\n                };\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <DxTemplatePlaceholder\n                    name=\"valueEditor\"\n                    column={attrs.tableColumn.column}\n                    value={filter ? filter.value : undefined}\n                    onValueChange={handleFilterValueChange}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                        getMessage={getMessage}\n                        column={attrs.tableColumn.column}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations}\n                              onChangeValue={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : ''}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChangeValue={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </DxTemplatePlaceholder>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isFilterTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => <FilterRow\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n              row={attrs.tableRow.row}\n            >\n              {slots.default}\n            </FilterRow>\n          }\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n} from '@devexpress/dx-grid-core';\n\nconst dependencies = [\n  { name: 'DxSortingState', optional: true },\n];\n\nconst callback = (\n  { grouping },\n  { grouping: prevGrouping },\n  { sorting },\n  { changeColumnSorting },\n  columnName,\n) => {\n  if (!sorting) return;\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const prevGroupingIndex = prevGrouping\n    .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n  const groupingIndex = grouping\n    .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n  if (columnSortingIndex === -1\n    || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n  const sortIndex = adjustSortIndex(\n    groupingIndex === -1 ? grouping.length : groupingIndex,\n    grouping,\n    sorting,\n  );\n\n  if (columnSortingIndex === sortIndex) return;\n\n  changeColumnSorting({\n    keepOther: true,\n    sortIndex,\n    ...sorting[columnSortingIndex],\n  });\n};\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nexport const DxGroupingState = {\n  name: 'DxGroupingState',\n  props: {\n    grouping: {\n      type: Array,\n      required: true,\n    },\n    expandedGroups: {\n      type: Array,\n      required: true,\n    },\n    columnExtensions: {\n      type: Array,\n      default: () => [],\n    },\n    columnGroupingEnabled: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  methods: {\n    changeColumnSorting(\n      { columnName, keepOther, ...restParams },\n      { sorting },\n      { changeColumnSorting },\n    ) {\n      const { grouping } = this;\n      const groupingIndex = grouping\n        .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n      if (groupingIndex === -1) {\n        changeColumnSorting({\n          columnName,\n          keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n          ...restParams,\n        });\n        return false;\n      }\n\n      const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n      changeColumnSorting({\n        columnName,\n        keepOther: true,\n        sortIndex,\n        ...restParams,\n      });\n      return false;\n    },\n    changeColumnGrouping({ columnName, groupingIndex }, getters, actions) {\n      const prevState = {\n        grouping: this.grouping,\n        expandedGroups: this.expandedGroups,\n      };\n      const stateChange = changeColumnGrouping(prevState, { columnName, groupingIndex });\n\n      this.$emit('update:grouping', stateChange.grouping);\n\n      callback({ ...prevState, ...stateChange }, prevState, getters, actions, columnName);\n    },\n    toggleGroupExpanded({ groupKey }) {\n      this.$emit(\n        'update:expandedGroups',\n        toggleExpandedGroups({ expandedGroups: this.expandedGroups }, { groupKey }).expandedGroups,\n      );\n    },\n  },\n  render() {\n    const { grouping, expandedGroups } = this;\n    const { columnExtensions, columnGroupingEnabled } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxGroupingState\"\n        dependencies={dependencies}\n      >\n        <DxGetter name=\"grouping\" value={grouping} />\n        <DxGetter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <DxAction name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <DxGetter name=\"expandedGroups\" value={expandedGroups} />\n        <DxAction name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n        <DxAction name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxGroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\n\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\n\nexport const DxIntegratedGrouping = {\n  name: 'DxIntegratedGrouping',\n  props: {\n    columnExtensions: {\n      type: Array,\n    },\n  },\n  render() {\n    const { columnExtensions } = this;\n    const getColumnCriteria = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue },\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <DxPlugin\n        name=\"DxIntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"isGroupRow\" value={groupRowChecker} />\n        <DxGetter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <DxGetter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <DxGetter name=\"rows\" computed={groupedRowsComputed} />\n        <DxGetter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxGroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\nconst getRowIdComputed = ({ getRowId, rows }) => customGroupingRowIdGetter(getRowId, rows);\n\nexport const DxCustomGrouping = {\n  name: 'DxCustomGrouping',\n  props: {\n    getChildGroups: {\n      type: Function,\n      required: true,\n    },\n    grouping: {\n      type: Array,\n    },\n    expandedGroups: {\n      type: Array,\n    },\n  },\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this;\n    const groupedRowsComputed = (\n      { rows, grouping },\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n    const groupingComputed = ({ grouping }) => appliedGrouping || grouping;\n    const expandedGroupsComputed = ({ expandedGroups }) => appliedExpandedGroups || expandedGroups;\n\n    return (\n      <DxPlugin\n        name=\"DxCustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"grouping\" computed={groupingComputed} />\n        <DxGetter name=\"expandedGroups\" computed={expandedGroupsComputed} />\n        <DxGetter name=\"isGroupRow\" value={groupRowChecker} />\n        <DxGetter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <DxGetter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <DxGetter name=\"rows\" computed={groupedRowsComputed} />\n        <DxGetter name=\"getRowId\" computed={getRowIdComputed} />\n        <DxGetter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate,\n  DxTemplatePlaceholder,\n  DxPlugin,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nexport const DxGroupingPanel = {\n  props: {\n    showSortingControls: {\n      type: Boolean,\n    },\n    showGroupingControls: {\n      type: Boolean,\n    },\n    messages: {\n      type: Object,\n    },\n    layoutComponent: {\n      type: Object,\n      required: true,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    itemComponent: {\n      type: Object,\n      required: true,\n    },\n    emptyMessageComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      layoutComponent: Layout,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const EmptyMessagePlaceholder = {\n      render() {\n        return (\n          <EmptyMessage\n            getMessage={getMessage}\n          />\n        );\n      },\n    };\n\n    const ItemPlaceholder = {\n      props: {\n        item: {\n          type: Object,\n          required: true,\n        },\n      },\n      render() {\n        const { name: columnName } = this.item.column;\n\n        return (\n          <DxTemplateConnector>\n            {({\n              getters: {\n                sorting, isColumnSortingEnabled, isColumnGroupingEnabled,\n              },\n              actions: {\n                changeColumnGrouping, changeColumnSorting,\n              },\n            }) => {\n              const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n              const groupingEnabled = isColumnGroupingEnabled\n              && isColumnGroupingEnabled(columnName);\n\n              return (\n                <Item\n                  item={this.item}\n                  sortingEnabled={sortingEnabled}\n                  groupingEnabled={groupingEnabled}\n                  showSortingControls={showSortingControls}\n                  sortingDirection={showSortingControls\n                    ? getColumnSortingDirection(sorting, columnName) : undefined}\n                  showGroupingControls={showGroupingControls}\n                  onGroup={() => changeColumnGrouping({ columnName })}\n                  onSort={(\n                    { direction, keepOther },\n                  ) => changeColumnSorting({ columnName, direction, keepOther })}\n                />\n              );\n            }}\n          </DxTemplateConnector>\n        );\n      },\n    };\n\n    return (\n      <DxPlugin\n        name=\"DxGroupingPanel\"\n        dependencies={[\n          { name: 'DxGroupingState' },\n          { name: 'DxToolbar' },\n          { name: 'DxSortingState', optional: !showSortingControls },\n        ]}\n      >\n        <DxTemplate name=\"toolbarContent\">\n          <div style={{ display: 'flex', flex: 1 }}>\n            <DxTemplateConnector>\n              {({\n                getters: {\n                  columns, grouping, isColumnGroupingEnabled,\n                },\n                actions: {\n                  changeColumnGrouping,\n                },\n              }) => (\n                <Layout\n                  items={groupingPanelItems(columns, grouping, [])}\n                  isColumnGroupingEnabled={isColumnGroupingEnabled}\n                  onGroup={changeColumnGrouping}\n                  itemComponent={ItemPlaceholder}\n                  emptyMessageComponent={EmptyMessagePlaceholder}\n                  containerComponent={Container}\n                />\n              )}\n            </DxTemplateConnector>\n            <DxTemplatePlaceholder />\n          </div>\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter,\n  DxTemplate,\n  DxPlugin,\n  DxTemplatePlaceholder,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableColumnsWithGrouping,\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupIndentTableCell,\n  isGroupTableCell,\n  isGroupTableRow,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxGroupingState' },\n  { name: 'DxTable' },\n  { name: 'DxDataTypeProvider', optional: true },\n];\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow },\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableGroupCellColSpanGetter(getTableCellColSpan);\n\nconst showColumnWhenGroupedGetter = (showColumnsWhenGrouped, columnExtensions = []) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\nexport const DxTableGroupRow = {\n  name: 'DxTableGroupRow',\n  props: {\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    indentCellComponent: {\n      type: Object,\n    },\n    indentColumnWidth: {\n      type: Number,\n      required: true,\n    },\n    showColumnsWhenGrouped: {\n      type: Boolean,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n  },\n  render() {\n    const {\n      cellComponent: GroupCell,\n      rowComponent: GroupRow,\n      indentCellComponent: GroupIndentCell,\n      indentColumnWidth,\n      showColumnsWhenGrouped,\n      columnExtensions,\n    } = this;\n\n    const tableColumnsComputed = ({\n      columns, tableColumns, grouping,\n    }) => tableColumnsWithGrouping(\n      columns,\n      tableColumns,\n      grouping,\n      grouping,\n      indentColumnWidth,\n      showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions),\n    );\n    return (\n      <DxPlugin\n        name=\"DxTableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <DxGetter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <DxGetter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={({ attrs: { tableRow } }) => isGroupTableRow(tableRow)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: {\n                  grouping,\n                  expandedGroups,\n                },\n                actions: {\n                  toggleGroupExpanded,\n                },\n              }) => {\n                if (isGroupTableCell(attrs.tableRow, attrs.tableColumn)) {\n                  return (\n                    <DxTemplatePlaceholder\n                      name=\"valueFormatter\"\n                      column={attrs.tableColumn.column}\n                      value={attrs.tableRow.row.value}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                          row={attrs.tableRow.row}\n                          column={attrs.tableColumn.column}\n                          expanded={expandedGroups.indexOf(attrs.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: attrs.tableRow.row.compoundKey })}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </DxTemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(attrs.tableRow, attrs.tableColumn, grouping)) {\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                        row={attrs.tableRow.row}\n                        column={attrs.tableColumn.column}\n                      />\n                    );\n                  }\n                  return <DxTemplatePlaceholder />;\n                }\n                return null;\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isGroupTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => (\n            <GroupRow\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n              row={attrs.tableRow.row}\n            >\n              {slots.default}\n            </GroupRow>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","export const ItemLayout = {\n  props: {\n    item: {\n      type: Object,\n      required: true,\n    },\n    itemComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n    } = this;\n    return <Item item={{ ...item }} />;\n  },\n};\n","import { ItemLayout } from './group-panel-layout/item-layout';\n\nexport const GroupPanelLayout = {\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    itemComponent: {\n      type: Object,\n      required: true,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    emptyMessageComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n    } = this;\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              item={item}\n              itemComponent={Item}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return groupPanel;\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\n\nexport const DxSearchState = {\n  name: 'DxSearchState',\n  props: {\n    value: {\n      type: String,\n      required: true,\n    },\n  },\n  methods: {\n    changeValue(payload) {\n      this.$emit(\n        'update:value',\n        changeSearchValue(this.value, payload),\n      );\n    },\n  },\n  render() {\n    const { value, changeValue } = this;\n    const filterExpressionComputed = (\n      { filterExpression, columns },\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <DxPlugin\n        name=\"DxSearchState\"\n      >\n        <DxGetter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <DxGetter name=\"searchValue\" value={value} />\n        <DxAction name=\"changeSearchValue\" action={changeValue} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate,\n  DxTemplatePlaceholder,\n  DxPlugin,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport { getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxToolbar' },\n  { name: 'DxSearchState' },\n];\n\nexport const DxSearchPanel = {\n  name: 'DxSearchPanel',\n  props: {\n    inputComponent: {\n      type: Object,\n      required: true,\n    },\n    messages: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  render() {\n    const { inputComponent: Input, messages } = this;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <DxPlugin\n        name=\"DxSearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <DxTemplate name=\"toolbarContent\">\n          <div style={{ display: 'flex', flex: 1 }}>\n            <DxTemplatePlaceholder />\n            <DxTemplateConnector>\n              {({\n                getters: { searchValue },\n                actions: { changeSearchValue },\n              }) => (\n                <Input\n                  value={searchValue}\n                  onValueChange={changeSearchValue}\n                  getMessage={getMessage}\n                />\n              )}\n            </DxTemplateConnector>\n          </div>\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\n\nexport const DxSelectionState = {\n  name: 'DxSelectionState',\n  props: {\n    selection: {\n      type: Array,\n      required: true,\n    },\n  },\n  methods: {\n    toggleSelection(payload) {\n      this.$emit(\n        'update:selection',\n        toggleSelection(this.selection, payload),\n      );\n    },\n  },\n  render() {\n    return (\n      <DxPlugin\n        name=\"DxSelectionState\"\n      >\n        <DxGetter name=\"selection\" value={this.selection} />\n        <DxAction name=\"toggleSelection\" action={this.toggleSelection} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow },\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }) => someSelected(rows, selection);\nconst selectAllAvailableComputed = ({ rows: { availableToSelect } }) => !!availableToSelect.length;\nconst toggleSelectAll = (state, { rows: { availableToSelect } }, { toggleSelection }) => {\n  toggleSelection({ rowIds: availableToSelect, state });\n};\nconst unwrapRowsComputed = ({ rows }) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'DxSelectionState' },\n];\n\nexport const DxIntegratedSelection = {\n  name: 'DxIntegratedSelection',\n  render() {\n    return (\n      <DxPlugin\n        name=\"DxIntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <DxGetter name=\"allSelected\" computed={allSelectedComputed} />\n        <DxGetter name=\"someSelected\" computed={someSelectedComputed} />\n        <DxGetter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <DxAction name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <DxGetter name=\"rows\" computed={unwrapRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter,\n  DxTemplate,\n  DxPlugin,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n} from '@devexpress/dx-grid-core';\n\nexport const DxTableSelection = {\n  name: 'DxTableSelection',\n  props: {\n    highlightRow: {\n      type: Boolean,\n    },\n    selectByRowClick: {\n      type: Boolean,\n    },\n    showSelectionColumn: {\n      type: Boolean,\n      default: true,\n    },\n    showSelectAll: {\n      type: Boolean,\n    },\n    selectionColumnWidth: {\n      type: Number,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    headerCellComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n\n    return (\n      <DxPlugin\n        name=\"DxTableSelection\"\n        dependencies={[\n          { name: 'DxTable' },\n          { name: 'DxSelectionState' },\n          { name: 'DxIntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        {showSelectionColumn && (\n          <DxGetter name=\"tableColumns\" computed={tableColumnsComputed} />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <DxTemplate\n            name=\"tableCell\"\n            predicate={(\n              { attrs: { tableRow, tableColumn } },\n            ) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {({ attrs, listeners }) => (\n              <DxTemplateConnector>\n                {({\n                  getters: { selectAllAvailable, allSelected, someSelected },\n                  actions: { toggleSelectAll },\n                }) => (\n                    <HeaderCell\n                      {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                      disabled={!selectAllAvailable}\n                      allSelected={allSelected}\n                      someSelected={someSelected}\n                      onToggle={select => toggleSelectAll(select)}\n                    />\n                )}\n              </DxTemplateConnector>\n            )}\n          </DxTemplate>\n        )}\n        {showSelectionColumn && (\n          <DxTemplate\n            name=\"tableCell\"\n            predicate={(\n              { attrs: { tableRow, tableColumn } },\n            ) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {({ attrs, listeners }) => (\n              <DxTemplateConnector>\n                {({\n                  getters: { selection },\n                  actions: { toggleSelection },\n                }) => (\n                    <Cell\n                      {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                      row={attrs.tableRow.row}\n                      selected={selection.indexOf(attrs.tableRow.rowId) !== -1}\n                      onToggle={() => toggleSelection({ rowIds: [attrs.tableRow.rowId] })}\n                    />\n                )}\n              </DxTemplateConnector>\n            )}\n          </DxTemplate>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <DxTemplate\n            name=\"tableRow\"\n            predicate={({ attrs: { tableRow } }) => isDataTableRow(tableRow)}\n          >\n            {({ attrs, listeners, slots }) => (\n              <DxTemplateConnector>\n                {({\n                  getters: { selection },\n                  actions: { toggleSelection },\n                }) => (\n                    <Row\n                      {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                      selectByRowClick={selectByRowClick}\n                      selected={highlightRow && selection.indexOf(attrs.tableRow.rowId) !== -1}\n                      onToggle={() => toggleSelection({ rowIds: [attrs.tableRow.rowId] })}\n                    >\n                      {slots.default}\n                    </Row>\n                )}\n              </DxTemplateConnector>\n            )}\n          </DxTemplate>\n        )}\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\n\nexport const DxPagingState = {\n  name: 'DxPagingState',\n  props: {\n    currentPage: {\n      type: Number,\n      required: true,\n    },\n    pageSize: {\n      type: Number,\n      default: 10,\n    },\n  },\n  methods: {\n    setCurrentPage(payload) {\n      this.$emit(\n        'update:currentPage',\n        setCurrentPage(this.currentPage, payload),\n      );\n    },\n    setPageSize(payload) {\n      this.$emit(\n        'update:pageSize',\n        setPageSize(this.pageSize, payload),\n      );\n    },\n  },\n  render() {\n    const { pageSize, currentPage } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxPagingState\"\n      >\n        <DxGetter name=\"pageSize\" value={pageSize} />\n        <DxGetter name=\"currentPage\" value={currentPage} />\n\n        <DxAction name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <DxAction name=\"setPageSize\" action={this.setPageSize} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxPagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey },\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page },\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }, { setCurrentPage },\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\nexport const DxIntegratedPaging = {\n  name: 'DxIntegratedPaging',\n  render() {\n    return (\n      <DxPlugin\n        name=\"DxIntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <DxGetter name=\"totalCount\" computed={totalCountComputed} />\n        <DxGetter name=\"currentPage\" computed={currentPageComputed} />\n        <DxGetter name=\"rows\" computed={paginatedRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\n\nconst pluginDependencies = [\n  { name: 'DxPagingState' },\n];\n\nexport const DxCustomPaging = {\n  name: 'DxCustomPaging',\n  props: {\n    totalCount: {\n      type: Number,\n      default: 0,\n    },\n  },\n\n  render() {\n    const { totalCount } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxCustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"totalCount\" value={totalCount} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate, DxTemplatePlaceholder,\n  DxTemplateConnector, DxPlugin,\n} from '@devexpress/dx-vue-core';\nimport { pageCount, getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxPagingState' },\n];\n\nexport const DxPagingPanel = {\n  name: 'DxPagingPanel',\n  props: {\n    pageSizes: {\n      type: Array,\n      default: () => [],\n    },\n    messages: {\n      type: Object,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <DxPlugin\n        name=\"DxPagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <DxTemplate name=\"footer\">\n          <div> {/* TODO: Wrapper required for multiple children */}\n            <DxTemplatePlaceholder />\n            <DxTemplateConnector>\n              {({\n                getters: { currentPage, pageSize, totalCount },\n                actions: { setCurrentPage, setPageSize },\n              }) => (\n                  <Pager\n                    currentPage={currentPage}\n                    pageSize={pageSize}\n                    totalCount={totalCount}\n                    totalPages={pageCount(totalCount, pageSize)}\n                    pageSizes={pageSizes}\n                    getMessage={getMessage}\n                    onCurrentPageChange={setCurrentPage}\n                    onPageSizeChange={setPageSize}\n                  />\n              )\n              }\n            </DxTemplateConnector>\n          </div>\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxPlugin, DxTemplate, DxGetter } from '@devexpress/dx-vue-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\n\nexport const DxDataTypeProvider = {\n  name: 'DxDataTypeProvider',\n  props: {\n    for: {\n      type: Array,\n      required: true,\n    },\n    formatterComponent: {\n      type: Object,\n    },\n    editorComponent: {\n      type: Object,\n    },\n    availableFilterOperations: {\n      type: Array,\n    },\n  },\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations },\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations,\n      columnNames,\n    );\n\n    return (\n      <DxPlugin name=\"DxDataTypeProvider\">\n        <DxGetter name=\"getAvailableFilterOperations\" computed={getAvailableFilterOperationsComputed} />\n        {Formatter\n          ? (\n            <DxTemplate\n              name=\"valueFormatter\"\n              predicate={({ attrs: { column } }) => columnNames.includes(column.name)}\n            >\n              {({ attrs }) => <Formatter {...{ attrs }} />}\n            </DxTemplate>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <DxTemplate\n              name=\"valueEditor\"\n              predicate={({ attrs: { column } }) => columnNames.includes(column.name)}\n            >\n              {({ attrs, listeners }) => (\n                <Editor {...{ attrs: { ...attrs }, on: { ...listeners } }} />\n              )}\n            </DxTemplate>\n          )\n          : null\n        }\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport { toggleDetailRowExpanded } from '@devexpress/dx-grid-core';\n\nexport const DxRowDetailState = {\n  name: 'DxRowDetailState',\n  props: {\n    expandedRowIds: {\n      type: Array,\n      required: true,\n    },\n  },\n  methods: {\n    toggleDetailRowExpanded(payload) {\n      this.$emit(\n        'update:expandedRowIds',\n        toggleDetailRowExpanded(this.expandedRowIds, payload),\n      );\n    },\n  },\n  render() {\n    return (\n      <DxPlugin\n        name=\"DxRowDetailState\"\n      >\n        <DxGetter name=\"expandedDetailRowIds\" value={this.expandedRowIds} />\n        <DxAction name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter,\n  DxTemplate,\n  DxPlugin,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'DxRowDetailState' },\n  { name: 'DxTable' },\n];\n\nexport const DxTableRowDetail = {\n  name: 'DxTableRowDetail',\n  props: {\n    contentComponent: {\n      type: Object,\n    },\n    toggleCellComponent: {\n      type: Object,\n      required: true,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n    toggleColumnWidth: {\n      type: Number,\n      required: true,\n    },\n    rowHeight: {\n      type: Number,\n    },\n  },\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds },\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n\n    return (\n      <DxPlugin\n        name=\"DxTableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <DxGetter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <DxGetter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: { expandedDetailRowIds },\n                actions: { toggleDetailRowExpanded },\n              }) => (\n                <ToggleCell\n                  {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                  row={attrs.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, attrs.tableRow.rowId)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: attrs.tableRow.rowId })}\n                />\n              )}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={({ attrs: { tableRow } }) => isDetailTableRow(tableRow)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: { tableColumns },\n              }) => {\n                if (isDetailTableCell(attrs.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                      row={attrs.tableRow.row}\n                    >\n                      <Content row={attrs.tableRow.row} />\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isDetailTableRow(tableRow)}\n        >\n          {({ attrs, listeners, slots }) => (\n            <Row\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n              row={attrs.tableRow.row}\n            >\n              {slots.default}\n            </Row>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nexport const DxEditingState = {\n  name: 'DxEditingState',\n  props: {\n    createRowChange: {\n      type: Function,\n    },\n    columnEditingEnabled: {\n      type: Boolean,\n      default: true,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n    editingRowIds: {\n      type: Array,\n      default: () => [],\n    },\n    addedRows: {\n      type: Array,\n      default: () => [],\n    },\n    rowChanges: {\n      type: Object,\n      default: () => ({}),\n    },\n    deletedRowIds: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  methods: {\n    startEditRows(payload) {\n      this.$emit(\n        'update:editingRowIds',\n        startEditRows(this.editingRowIds, payload),\n      );\n    },\n    stopEditRows(payload) {\n      this.$emit(\n        'update:editingRowIds',\n        stopEditRows(this.editingRowIds, payload),\n      );\n    },\n    changeRow(payload) {\n      this.$emit(\n        'update:rowChanges',\n        changeRow(this.rowChanges, payload),\n      );\n    },\n    cancelChangedRows(payload) {\n      this.$emit(\n        'update:rowChanges',\n        cancelChanges(this.rowChanges, payload),\n      );\n    },\n    commitChangedRows({ rowIds }) {\n      this.$emit(\n        'commitChanges',\n        { changed: changedRowsByIds(this.rowChanges, rowIds) },\n      );\n      this.cancelChangedRows({ rowIds });\n    },\n    addRow(payload) {\n      this.$emit(\n        'update:addedRows',\n        addRow(this.addedRows, payload),\n      );\n    },\n    changeAddedRow(payload) {\n      this.$emit(\n        'update:addedRows',\n        changeAddedRow(this.addedRows, payload),\n      );\n    },\n    cancelAddedRows(payload) {\n      this.$emit(\n        'update:addedRows',\n        cancelAddedRows(this.addedRows, payload),\n      );\n    },\n    commitAddedRows({ rowIds }) {\n      this.$emit(\n        'commitChanges',\n        { added: addedRowsByIds(this.addedRows, rowIds) },\n      );\n      this.cancelAddedRows({ rowIds });\n    },\n    deleteRows(payload) {\n      this.$emit(\n        'update:deletedRowIds',\n        deleteRows(this.deletedRowIds, payload),\n      );\n    },\n    cancelDeletedRows(payload) {\n      this.$emit(\n        'update:deletedRowIds',\n        cancelDeletedRows(this.deletedRowIds, payload),\n      );\n    },\n    commitDeletedRows({ rowIds }) {\n      this.$emit(\n        'commitChanges',\n        { deleted: rowIds },\n      );\n      this.cancelDeletedRows({ rowIds });\n    },\n  },\n  render() {\n    const {\n      createRowChange,\n      columnExtensions,\n      columnEditingEnabled,\n      editingRowIds,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxEditingState\"\n      >\n        <DxGetter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <DxGetter name=\"editingRowIds\" value={editingRowIds} />\n        <DxAction name=\"startEditRows\" action={this.startEditRows} />\n        <DxAction name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <DxGetter name=\"rowChanges\" value={rowChanges} />\n        <DxAction name=\"changeRow\" action={this.changeRow} />\n        <DxAction name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <DxAction name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <DxGetter name=\"addedRows\" value={addedRows} />\n        <DxAction name=\"addRow\" action={this.addRow} />\n        <DxAction name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <DxAction name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <DxAction name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <DxGetter name=\"deletedRowIds\" value={deletedRowIds} />\n        <DxAction name=\"deleteRows\" action={this.deleteRows} />\n        <DxAction name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <DxAction name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <DxGetter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter, DxTemplate, DxPlugin, DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport {\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxEditingState' },\n  { name: 'DxTable' },\n];\n\nexport const DxTableEditColumn = {\n  name: 'DxTableEditColumn',\n  props: {\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    headerCellComponent: {\n      type: Object,\n      required: true,\n    },\n    commandComponent: {\n      type: Object,\n      required: true,\n    },\n    showAddCommand: {\n      type: Boolean,\n    },\n    showEditCommand: {\n      type: Boolean,\n    },\n    showDeleteCommand: {\n      type: Boolean,\n    },\n    width: {\n      type: Number,\n      default: 140,\n    },\n    messages: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this;\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = ({ tableColumns }) => tableColumnsWithEditing(tableColumns, width);\n\n    return (\n      <DxPlugin\n        name=\"DxTableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({ actions: { addRow } }) => (\n                <HeaderCell\n                  {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                >\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )\n            }\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                actions: {\n                  startEditRows,\n                  commitDeletedRows,\n                  commitAddedRows,\n                  commitChangedRows,\n                  deleteRows,\n                  stopEditRows,\n                  cancelAddedRows,\n                  cancelChangedRows,\n                },\n              }) => {\n                const isEdit = isEditTableRow(attrs.tableRow);\n                const isNew = isAddedTableRow(attrs.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [attrs.tableRow.rowId];\n                return (\n                  <Cell\n                    {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                    row={attrs.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          deleteRows({ rowIds });\n                          commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            commitAddedRows({ rowIds });\n                          } else {\n                            stopEditRows({ rowIds });\n                            commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            cancelAddedRows({ rowIds });\n                          } else {\n                            stopEditRows({ rowIds });\n                            cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter, DxTemplate, DxTemplatePlaceholder, DxTemplateConnector, DxPlugin,\n} from '@devexpress/dx-vue-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxEditingState' },\n  { name: 'DxTable' },\n  { name: 'DxDataTypeProvider', optional: true },\n];\n\nexport const DxTableEditRow = {\n  name: 'DxTableEditRow',\n  props: {\n    rowHeight: {\n      type: Number,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    rowComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows },\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <DxPlugin\n        name=\"DxTableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: {\n                  getCellValue,\n                  createRowChange,\n                  rowChanges,\n                  isColumnEditingEnabled,\n                },\n                actions: {\n                  changeAddedRow,\n                  changeRow,\n                },\n              }) => {\n                const { rowId, row } = attrs.tableRow;\n                const { column } = attrs.tableColumn;\n                const { name: columnName } = column;\n\n                const isNew = isAddedTableRow(attrs.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                return (\n                  <DxTemplatePlaceholder\n                    name=\"valueEditor\"\n                    column={column}\n                    row={row}\n                    value={value}\n                    onValueChange={onValueChange}\n                  >\n                    {content => (\n                      <EditCell\n                        {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                        row={row}\n                        column={column}\n                        value={value}\n                        editingEnabled={isColumnEditingEnabled(columnName)}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </DxTemplatePlaceholder>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={(\n            { attrs: { tableRow } },\n          ) => (isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {({ attrs, listeners, slots }) => (\n            <EditRow\n              {...{ attrs: { ...attrs }, on: { ...listeners } }}\n              row={attrs.tableRow.row}\n            >\n              {slots.default}\n            </EditRow>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxAction, DxPlugin } from '@devexpress/dx-vue-core';\nimport { toggleRowExpanded } from '@devexpress/dx-grid-core';\n\nexport const DxTreeDataState = {\n  name: 'DxTreeDataState',\n  props: {\n    expandedRowIds: {\n      type: Array,\n      required: true,\n    },\n  },\n  methods: {\n    toggleRowExpanded(payload) {\n      this.$emit(\n        'update:expandedRowIds',\n        toggleRowExpanded(this.expandedRowIds, payload),\n      );\n    },\n  },\n  render() {\n    return (\n      <DxPlugin\n        name=\"DxTreeDataState\"\n      >\n        <DxGetter name=\"expandedRowIds\" value={this.expandedRowIds} />\n        <DxAction name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </DxPlugin>\n    );\n  },\n};\n","import { DxGetter, DxPlugin } from '@devexpress/dx-vue-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxTreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds },\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows },\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows },\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows },\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }) => unwrappedCustomTreeRows(rows);\n\nexport const DxCustomTreeData = {\n  name: 'DxCustomTreeData',\n  props: {\n    getChildRows: {\n      type: Function,\n      required: true,\n    },\n  },\n  render() {\n    const { getChildRows } = this;\n    const treeRowsComputed = ({ rows }) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <DxPlugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"rows\" computed={treeRowsComputed} />\n        <DxGetter name=\"getRowId\" computed={getRowIdComputed} />\n        <DxGetter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <DxGetter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <DxGetter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <DxGetter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <DxGetter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <DxGetter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate, DxPlugin, DxTemplateConnector, DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\n\nexport const DxTableTreeColumn = {\n  name: 'DxTableTreeColumn',\n  props: {\n    for: {\n      type: String,\n      required: true,\n    },\n    showSelectionControls: {\n      type: Boolean,\n      default: false,\n    },\n    showSelectAll: {\n      type: Boolean,\n      default: false,\n    },\n    cellComponent: {\n      type: Object,\n      required: true,\n    },\n    indentComponent: {\n      type: Object,\n      required: true,\n    },\n    expandButtonComponent: {\n      type: Object,\n      required: true,\n    },\n    checkboxComponent: {\n      type: Object,\n      required: true,\n    },\n    contentComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxTableTreeColumn\"\n        dependencies={[\n          { name: 'DxDataTypeProvider', optional: true },\n          { name: 'DxTreeDataState' },\n          { name: 'DxSelectionState', optional: !showSelectionControls },\n          { name: 'DxIntegratedSelection', optional: !showSelectAll },\n          { name: 'DxTable' },\n          { name: 'DxTableHeaderRow', optional: true },\n        ]}\n      >\n        <DxTemplate\n          name=\"tableHeaderCellBefore\"\n          predicate={({ attrs: { column } }) => column.name === forColumnName}\n        >\n          <div style=\"display: flex\">\n            <ExpandButton\n              visible={false}\n            />\n            {showSelectionControls && showSelectAll && (\n              <DxTemplateConnector>\n                {({\n                  getters: { selectAllAvailable, allSelected, someSelected },\n                  actions: { toggleSelectAll },\n                }) => (\n                  <Checkbox\n                    disabled={!selectAllAvailable}\n                    checked={allSelected}\n                    indeterminate={someSelected}\n                    onChange={toggleSelectAll}\n                  />\n                )}\n              </DxTemplateConnector>\n            )}\n          </div>\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {({ attrs, listeners }) => (\n            <DxTemplateConnector>\n              {({\n                getters: {\n                  getCollapsedRows, expandedRowIds, selection,\n                  isTreeRowLeaf, getTreeRowLevel, getCellValue,\n                },\n                actions: { toggleRowExpanded, toggleSelection },\n              }) => {\n                const { row, rowId } = attrs.tableRow;\n                const columnName = attrs.tableColumn.column.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <DxTemplatePlaceholder\n                    name=\"valueFormatter\"\n                    row={row}\n                    column={attrs.tableColumn.column}\n                    value={value}\n                  >\n                    {content => (\n                      <Cell\n                        {...{ attrs: { ...attrs }, on: { ...listeners } }}\n                        row={row}\n                        column={attrs.tableColumn.column}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </DxTemplatePlaceholder>\n                );\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter, DxTemplate, DxPlugin,\n  DxTemplateConnector, DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\nimport {\n  getBandComponent,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n} from '@devexpress/dx-grid-core';\n\nconst CellPlaceholder = {\n  render() {\n    return <DxTemplatePlaceholder />;\n  },\n};\n\nexport const DxTableBandHeader = {\n  name: 'DxTableBandHeader',\n  props: {\n    columnBands: {\n      type: Array,\n    },\n    cellComponent: {\n      type: Object,\n    },\n    rowComponent: {\n      type: Object,\n    },\n    bandedHeaderCellComponent: {\n      type: Object,\n    },\n    invisibleCellComponent: {\n      type: Object,\n    },\n  },\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns },\n    ) => tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n\n    return (\n      <DxPlugin\n        name=\"DxTableBandHeader\"\n        dependencies={[\n          { name: 'DxTable' },\n          { name: 'DxTableHeaderRow' },\n          { name: 'DxTableSelection', optional: true },\n          { name: 'DxTableEditColumn', optional: true },\n        ]}\n      >\n        <DxGetter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={({ attrs: { tableRow } }) => isBandedOrHeaderRow(tableRow)}\n        >\n          {({ attrs }) => (\n            <DxTemplateConnector>\n              {({\n                getters: { tableColumns, tableHeaderRows },\n              }) => {\n                const bandComponent = getBandComponent(\n                  attrs, tableHeaderRows, tableColumns, columnBands,\n                );\n\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return (\n                      <DxTemplatePlaceholder\n                        colSpan={attrs.colSpan}\n                        tableColumn={attrs.tableColumn}\n                        tableRow={attrs.tableRow}\n                        rowSpan={attrs.rowSpan}\n                      />\n                    );\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload;\n                    return (\n                      <Cell {...{ attrs: { ...attrs, ...payload } }}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n                  case BAND_HEADER_CELL:\n                    return (\n                      <DxTemplatePlaceholder\n                        name=\"tableCell\"\n                        colSpan={attrs.colSpan}\n                        tableColumn={attrs.tableColumn}\n                        tableRow={bandComponent.payload.tableRow}\n                        rowSpan={bandComponent.payload.rowSpan}\n                      />\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableCell\"\n          predicate={(\n            { attrs: { tableRow, tableColumn } },\n          ) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {({ attrs }) => <HeaderCell component={CellPlaceholder} {...{ attrs: { ...attrs } }} />}\n        </DxTemplate>\n        <DxTemplate\n          name=\"tableRow\"\n          predicate={({ attrs: { tableRow } }) => isBandedTableRow(tableRow)}\n        >\n          {({ attrs, slots }) => (\n            <Row {...{ attrs: { ...attrs } }}>\n              {slots.default}\n            </Row>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxGetter,\n  DxAction,\n  DxPlugin,\n  DxTemplate,\n  DxTemplateConnector,\n  DxTemplatePlaceholder,\n} from '@devexpress/dx-vue-core';\n\nimport {\n  getMessagesFormatter,\n  toggleColumn,\n  visibleTableColumns,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxTable' },\n];\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames },\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\nexport const DxTableColumnVisibility = {\n  name: 'DxTableColumnVisibility',\n  props: {\n    hiddenColumnNames: {\n      type: Array,\n      required: true,\n    },\n    emptyMessageComponent: {\n      type: Object,\n      required: true,\n    },\n    messages: {\n      type: Object,\n    },\n    columnExtensions: {\n      type: Array,\n    },\n    columnTogglingEnabled: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  methods: {\n    toggleColumnVisibility(columnName) {\n      this.$emit(\n        'update:hiddenColumnNames',\n        toggleColumn(this.hiddenColumnNames, columnName),\n      );\n    },\n  },\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n      hiddenColumnNames,\n      columnExtensions,\n      columnTogglingEnabled,\n    } = this;\n    const getMessage = getMessagesFormatter(messages);\n    return (\n      <DxPlugin\n        name=\"DxTableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <DxGetter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n        <DxGetter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n        <DxGetter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <DxAction\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <DxTemplate name=\"table\">\n          {attrs => (\n            <DxTemplateConnector>\n              {({ getters: { tableColumns } }) => (tableDataColumnsExist(tableColumns)\n                ? <DxTemplatePlaceholder />\n                : <EmptyMessage\n                    getMessage={getMessage}\n                    {...{ attrs }}\n                />\n              )}\n            </DxTemplateConnector>\n          )}\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n","import {\n  DxTemplate,\n  DxTemplatePlaceholder,\n  DxPlugin,\n  DxTemplateConnector,\n} from '@devexpress/dx-vue-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'DxTableColumnVisibility' },\n  { name: 'DxToolbar' },\n];\nexport const DxColumnChooser = {\n  name: 'DxColumnChooser',\n  props: {\n    overlayComponent: {\n      type: Object,\n      required: true,\n    },\n    containerComponent: {\n      type: Object,\n      required: true,\n    },\n    itemComponent: {\n      type: Object,\n      required: true,\n    },\n    toggleButtonComponent: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      visible: false,\n    };\n  },\n  methods: {\n    setButtonRef(button) {\n      this.button = button;\n    },\n    handleToggle() {\n      this.visible = !this.visible;\n    },\n    handleHide() {\n      this.visible = false;\n    },\n  },\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      visible,\n    } = this;\n\n    return (\n      <DxPlugin\n        name=\"DxColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <DxTemplate name=\"toolbarContent\">\n            <div style={{ display: 'flex', flex: 1 }}>\n              <DxTemplatePlaceholder />\n              <DxTemplateConnector>\n                {({\n                  getters: {\n                    columns,\n                    hiddenColumnNames,\n                    isColumnTogglingEnabled,\n                  },\n                  actions: {\n                    toggleColumnVisibility,\n                  },\n                }) => (\n                    <div style={{ display: 'flex', alignItems: 'center', position: 'relative' }}>\n                      <ToggleButton\n                        buttonRef={this.setButtonRef}\n                        onToggle={this.handleToggle}\n                        active={visible}\n                      />\n                      <Overlay\n                        visible={visible}\n                        target={this.button}\n                        onHide={this.handleHide}\n                      >\n                        <Container>\n                          {columnChooserItems(columns, hiddenColumnNames)\n                            .map((item) => {\n                              const { name: columnName } = item.column;\n                              const togglingEnabled = isColumnTogglingEnabled(columnName);\n                              return (\n                                <Item\n                                  key={columnName}\n                                  item={item}\n                                  disabled={!togglingEnabled}\n                                  onToggle={() => toggleColumnVisibility(columnName)}\n                                />\n                              );\n                            })}\n                        </Container>\n                      </Overlay>\n                    </div>\n                )}\n              </DxTemplateConnector>\n            </div>\n        </DxTemplate>\n      </DxPlugin>\n    );\n  },\n};\n"],"names":["GridCore","Array","Function","Object","rows","columns","getRowId","getCellValue","Root","rootComponent","rowIdGetter","cellValueGetter","DxGrid","h","context","data","children","nestRE","mergeJSXProps","objs","reduce","a","b","aa","bb","key","nestedKey","temp","test","mergeFn","isArray","concat","apply","arguments","RowPlaceholder","Number","String","attrs","$props","$slots","default","CellPlaceholder","tableHeaderRows","tableBodyRowsComputed","tableRowsWithDataRows","pluginDependencies","name","optional","DxTable","Layout","layoutComponent","Cell","cellComponent","Row","rowComponent","NoDataRow","noDataRowComponent","NoDataCell","noDataCellComponent","StubRow","stubRowComponent","StubCell","stubCellComponent","StubHeaderCell","stubHeaderCellComponent","columnExtensions","containerComponent","tableComponent","headComponent","bodyComponent","messages","getMessage","getMessagesFormatter","tableColumnsComputed","tableColumnsWithDataRows","tableCellColSpanGetter","getters","headerRows","bodyRows","tableBodyRows","tableColumns","getTableCellColSpan","listeners","isHeaderStubTableCell","tableRow","on","tableColumn","isDataTableCell","value","row","column","content","isNoDataTableRow","isNoDataTableCell","slots","isDataTableRow","tableHeaderRowsComputed","tableRowsWithHeading","DxTableHeaderRow","Boolean","HeaderCell","HeaderRow","isHeadingTableCell","sorting","isColumnSortingEnabled","isColumnGroupingEnabled","actions","changeColumnSorting","changeColumnGrouping","columnName","atLeastOneDataColumn","filter","type","TABLE_DATA_TYPE","length","sortingEnabled","groupingEnabled","showSortingControls","showGroupingControls","getColumnSortingDirection","undefined","direction","keepOther","isHeadingTableRow","DxIntegratedSorting","getColumnCompare","getColumnExtension","compare","rowsComputed","isGroupRow","getRowLevelKey","sortedRows","DxSortingState","payload","persistentSortedColumns","getPersistentSortedColumns","calculateKeepOther","$emit","columnSortingEnabled","columnExtensionValueGetter","extensions","defaultValue","getColumnExtensionValueGetter","DxToolbar","FlexibleSpaceComponent","flexibleSpaceComponent","TABLE_FLEX_TYPE","TableLayout","result","isFixedWidth","width","slice","push","minColumnWidth","getColumns","minWidth","map","acc","$attrs","ColumnGroup","getRowStyle","height","RowLayout","getCellColSpan","getColSpan","RowsBlockLayout","Block","blockComponent","StaticTableLayout","Table","Container","VirtualTableLayout","Map","storeRowHeights","prevRowHeight","rowHeights","rowHeight","get","set","storedHeight","estimatedRowHeight","rowsWithChangedHeights","keys","$refs","node","$el","getBoundingClientRect","getRowHeight","newRowHeights","forEach","e","target","currentTarget","scrollTop","scrollLeft","clientWidth","Math","max","scrollWidth","clientHeight","scrollHeight","viewportTop","viewportLeft","collapsedGrid","Body","visibleRow","cells","cell","colSpan","animationState","HeadTable","headTableComponent","Head","updateViewport","renderRowsBlock","headHeight","collapsedHeaderGrid","getCollapsedGrid","collapsedBodyGrid","filterExpressionComputed","filters","filterExpressionValue","filterExpression","DxFilteringState","changeColumnFilter","columnFilteringEnabled","getCollapsedRowsComputed","filteredCollapsedRowsGetter","unwrappedRowsComputed","unwrappedFilteredRows","DxIntegratedFiltering","getColumnPredicate","predicate","getCollapsedRows","filteredRows","defaultPredicate","defaultFilterPredicate","DxTableFilterRow","showFilterSelector","FilterCell","FilterRow","FilterSelector","filterSelectorComponent","iconComponent","EditorComponent","editorComponent","filterOperations","tableHeaderRowsWithFilter","isFilterTableCell","isColumnFilteringEnabled","getAvailableFilterOperations","getColumnFilterConfig","onFilter","config","columnFilterOperations","getColumnFilterOperations","selectedFilterOperation","handleFilterOperationChange","isFilterValueEmpty","operation","handleFilterValueChange","filteringEnabled","isFilterTableRow","dependencies","callback","grouping","prevGrouping","columnSortingIndex","findIndex","columnSorting","prevGroupingIndex","columnGrouping","groupingIndex","sortIndex","adjustSortIndex","DxGroupingState","restParams","prevState","expandedGroups","stateChange","groupKey","toggleExpandedGroups","columnGroupingEnabled","toggleGroupExpanded","groupCollapsedRowsGetter","expandedGroupedRowsComputed","expandedGroupRows","DxIntegratedGrouping","getColumnCriteria","criteria","groupedRowsComputed","groupedRows","groupRowChecker","groupRowLevelKeyGetter","getRowIdComputed","customGroupingRowIdGetter","DxCustomGrouping","getChildGroups","appliedGrouping","appliedExpandedGroups","customGroupedRows","groupingComputed","expandedGroupsComputed","DxGroupingPanel","Item","itemComponent","EmptyMessage","emptyMessageComponent","EmptyMessagePlaceholder","ItemPlaceholder","item","display","flex","groupingPanelItems","tableRowsWithGrouping","getCellColSpanComputed","tableGroupCellColSpanGetter","showColumnWhenGroupedGetter","showColumnsWhenGrouped","columnExtension","showWhenGrouped","DxTableGroupRow","GroupCell","GroupRow","GroupIndentCell","indentCellComponent","indentColumnWidth","tableColumnsWithGrouping","isGroupTableRow","isGroupTableCell","indexOf","compoundKey","isGroupIndentTableCell","ItemLayout","GroupPanelLayout","items","groupPanel","DxSearchState","changeSearchValue","changeValue","searchFilterExpression","DxSearchPanel","Input","inputComponent","searchValue","DxSelectionState","toggleSelection","selection","rowsWithAvailableToSelectComputed","rowsWithAvailableToSelect","allSelectedComputed","allSelected","someSelectedComputed","someSelected","selectAllAvailableComputed","availableToSelect","toggleSelectAll","state","rowIds","unwrapRowsComputed","unwrapSelectedRows","DxIntegratedSelection","DxTableSelection","highlightRow","selectByRowClick","showSelectionColumn","showSelectAll","headerCellComponent","selectionColumnWidth","tableColumnsWithSelection","isSelectAllTableCell","selectAllAvailable","select","isSelectTableCell","rowId","DxPagingState","setCurrentPage","currentPage","setPageSize","pageSize","rowsWithHeadersComputed","rowsWithPageHeaders","totalCountComputed","rowCount","paginatedRowsComputed","page","paginatedRows","currentPageComputed","totalCount","DxIntegratedPaging","DxCustomPaging","DxPagingPanel","Pager","pageSizes","pageCount","DxDataTypeProvider","columnNames","for","Formatter","formatterComponent","Editor","availableFilterOperations","getAvailableFilterOperationsComputed","getAvailableFilterOperationsGetter","includes","DxRowDetailState","toggleDetailRowExpanded","expandedRowIds","tableDetailCellColSpanGetter","DxTableRowDetail","Content","contentComponent","ToggleCell","toggleCellComponent","toggleColumnWidth","tableColumnsWithDetail","expandedDetailRowIds","tableRowsWithExpandedDetail","isDetailToggleTableCell","isDetailRowExpanded","isDetailTableRow","isDetailTableCell","DxEditingState","startEditRows","editingRowIds","stopEditRows","changeRow","rowChanges","cancelChanges","changed","changedRowsByIds","cancelChangedRows","addRow","addedRows","changeAddedRow","cancelAddedRows","added","addedRowsByIds","deleteRows","deletedRowIds","cancelDeletedRows","deleted","createRowChange","columnEditingEnabled","createRowChangeGetter","commitChangedRows","commitAddedRows","commitDeletedRows","DxTableEditColumn","Command","commandComponent","showAddCommand","showEditCommand","showDeleteCommand","tableColumnsWithEditing","isHeadingEditCommandsTableCell","isEditCommandsTableCell","isEdit","isEditTableRow","isNew","isAddedTableRow","isEditing","DxTableEditRow","EditCell","EditRow","tableRowsWithEditing","isEditTableCell","isColumnEditingEnabled","changedRow","getRowChange","onValueChange","newValue","changeArgs","DxTreeDataState","toggleRowExpanded","expandedTreeRowsComputed","expandedTreeRows","customTreeRowIdGetter","getRowLevelKeyComputed","customTreeRowLevelKeyGetter","isTreeRowLeafComputed","isTreeRowLeafGetter","getTreeRowLevelComputed","getTreeRowLevelGetter","collapsedTreeRowsGetterComputed","collapsedTreeRowsGetter","unwrappedTreeRowsComputed","unwrappedCustomTreeRows","DxCustomTreeData","getChildRows","treeRowsComputed","customTreeRowsWithMeta","DxTableTreeColumn","forColumnName","showSelectionControls","Indent","indentComponent","ExpandButton","expandButtonComponent","Checkbox","checkboxComponent","isTreeTableCell","isTreeRowLeaf","getTreeRowLevel","collapsedRows","DxTableBandHeader","bandedHeaderCellComponent","InvisibleCell","invisibleCellComponent","columnBands","tableRowsWithBands","isBandedOrHeaderRow","bandComponent","getBandComponent","BAND_DUPLICATE_RENDER","rowSpan","BAND_EMPTY_CELL","BAND_GROUP_CELL","BAND_HEADER_CELL","isBandedTableRow","visibleTableColumnsComputed","hiddenColumnNames","visibleTableColumns","DxTableColumnVisibility","toggleColumn","columnTogglingEnabled","toggleColumnVisibility","tableDataColumnsExist","DxColumnChooser","button","visible","Overlay","overlayComponent","ToggleButton","toggleButtonComponent","isColumnTogglingEnabled","alignItems","position","setButtonRef","handleToggle","handleHide","columnChooserItems","togglingEnabled"],"mappings":"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"}